# -*- coding: utf-8 -*-
"""producao-por-fazenda

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pTE2eD9M3s4WdMI8yQtazyfOeL7Pb-R0
"""

import pandas as pd

# 1) Fazendas (cadastro)
fazendas_df = pd.DataFrame([
    {"Fazenda": "Fazenda Maruim",        "Localização": "Lages – SC",        "Área (ha)": 300,  "Porte": "Pequena"},
    {"Fazenda": "Fazenda Gaúcha",        "Localização": "Passo Fundo – RS",  "Área (ha)": 400,  "Porte": "Pequena"},
    {"Fazenda": "Fazenda Campos Gerais", "Localização": "Ponta Grossa – PR", "Área (ha)": 500,  "Porte": "Pequena"},
    {"Fazenda": "Fazenda Pantanal",      "Localização": "Dourados – MS",     "Área (ha)": 1200, "Porte": "Média"},
    {"Fazenda": "Fazenda Cerrado",       "Localização": "Sorriso – MT",      "Área (ha)": 2500, "Porte": "Grande"},
    {"Fazenda": "Fazenda Capital",       "Localização": "Rio Verde – GO",    "Área (ha)": 2200, "Porte": "Grande"},
])

# 2) Condições agroambientais por fazenda
condicoes_df = pd.DataFrame([
    {"Fazenda": "Fazenda Maruim",        "Radiação": "Baixa", "Água": "Alta",  "pH": "Ácido",  "Textura": "Argilosa", "Temperatura": "Frio",   "Fertilidade": "Média"},
    {"Fazenda": "Fazenda Gaúcha",        "Radiação": "Media", "Água": "Alta",  "pH": "Ácido",  "Textura": "Argilosa", "Temperatura": "Frio",   "Fertilidade": "Alta"},
    {"Fazenda": "Fazenda Campos Gerais", "Radiação": "Media", "Água": "Média", "pH": "Ácido",  "Textura": "Argilosa", "Temperatura": "Frio",   "Fertilidade": "Média"},
    {"Fazenda": "Fazenda Pantanal",      "Radiação": "Alta",  "Água": "Alta",  "pH": "Básico", "Textura": "Arenosa",  "Temperatura": "Quente", "Fertilidade": "Baixa"},
    {"Fazenda": "Fazenda Cerrado",       "Radiação": "Alta",  "Água": "Média", "pH": "Básico", "Textura": "Arenosa",  "Temperatura": "Quente", "Fertilidade": "Baixa"},
    {"Fazenda": "Fazenda Capital",       "Radiação": "Alta",  "Água": "Média", "pH": "Básico", "Textura": "Arenosa",  "Temperatura": "Quente", "Fertilidade": "Baixa"},
])

# 3) Perfil agronômico desejado por grão
perfil_grao_df = pd.DataFrame([
    {"Grão": "Milho",    "Água": "Alta",  "pH ideal": "Básico", "Textura preferida": "Argilosa", "Temp. ideal": "Quente", "Radiação": "Alta",  "Fertilidade": "Alta"},
    {"Grão": "Soja",     "Água": "Muita", "pH ideal": "Básico", "Textura preferida": "Argilosa", "Temp. ideal": "Quente", "Radiação": "Alta",  "Fertilidade": "Alta"},
    {"Grão": "Sorgo",    "Água": "Pouca", "pH ideal": "Básico", "Textura preferida": "Arenosa",  "Temp. ideal": "Quente", "Radiação": "Alta",  "Fertilidade": "Média"},
    {"Grão": "Trigo",    "Água": "Média", "pH ideal": "Ácido",  "Textura preferida": "Argilosa", "Temp. ideal": "Frio",   "Radiação": "Média", "Fertilidade": "Média"},
    {"Grão": "Aveia",    "Água": "Média", "pH ideal": "Ácido",  "Textura preferida": "Argilosa", "Temp. ideal": "Frio",   "Radiação": "Média", "Fertilidade": "Média"},
    {"Grão": "Girassol", "Água": "Pouca", "pH ideal": "Básico", "Textura preferida": "Arenosa",  "Temp. ideal": "Quente", "Radiação": "Alta",  "Fertilidade": "Média"},
])

# 4) Pesos de importância (em porcentagem; somam 100 por grão)
pesos_importancia_df = pd.DataFrame([
    {"Grão": "Milho",    "Água": 22, "pH": 13, "Textura": 13, "Temperatura": 22, "Radiação": 15, "Fertilidade": 15},
    {"Grão": "Soja",     "Água": 20, "pH": 17, "Textura": 13, "Temperatura": 20, "Radiação": 16, "Fertilidade": 14},
    {"Grão": "Sorgo",    "Água": 13, "pH": 13, "Textura": 20, "Temperatura": 22, "Radiação": 16, "Fertilidade": 16},
    {"Grão": "Trigo",    "Água": 18, "pH": 18, "Textura": 14, "Temperatura": 22, "Radiação": 16, "Fertilidade": 12},
    {"Grão": "Aveia",    "Água": 18, "pH": 18, "Textura": 14, "Temperatura": 22, "Radiação": 16, "Fertilidade": 12},
    {"Grão": "Girassol", "Água": 13, "pH": 13, "Textura": 17, "Temperatura": 20, "Radiação": 17, "Fertilidade": 20},
])

# (opcional) mesma tabela de pesos em fração (0–1)
pesos_importancia_frac_df = pesos_importancia_df.copy()
for col in ["Água", "pH", "Textura", "Temperatura", "Radiação", "Fertilidade"]:
    pesos_importancia_frac_df[col] = pesos_importancia_frac_df[col] / 100.0

# 5) Produção Média Padrão (t/ha)
producao_padrao_df = pd.DataFrame([
    {"Grão": "Milho",    "Produção (t/ha)": 6.0},
    {"Grão": "Soja",     "Produção (t/ha)": 3.8},
    {"Grão": "Sorgo",    "Produção (t/ha)": 3.2},
    {"Grão": "Trigo",    "Produção (t/ha)": 3.0},
    {"Grão": "Aveia",    "Produção (t/ha)": 2.8},
    {"Grão": "Girassol", "Produção (t/ha)": 1.8},
])

import unicodedata
import pandas as pd

# -----------------------
# Helpers de normalização
# -----------------------
def strip_accents_lower(s: str) -> str:
    if pd.isna(s):
        return ""
    s = str(s)
    s = unicodedata.normalize("NFKD", s)
    s = "".join(c for c in s if not unicodedata.combining(c))
    return s.lower().strip()

def normaliza_categoria(fator: str, valor: str) -> str:
    v = strip_accents_lower(valor)

    # Mapeia sinônimos por fator
    if fator == "Água":
        # "muita" ~ "alta"; "pouca" ~ "baixa"
        if v == "muita": v = "alta"
        if v == "pouca": v = "baixa"
    if fator == "Radiação":
        # já vem como baixa/media/alta; garantir "media"
        if v == "média": v = "media"
    if fator == "Temperatura":
        # só frio/quente aqui
        pass
    if fator == "pH":
        # "acido"/"basico"
        if v == "ácido": v = "acido"
        if v == "básico": v = "basico"
    if fator == "Textura":
        # argilosa/arenosa
        pass
    if fator == "Fertilidade":
        # baixa/media/alta
        if v == "média": v = "media"
    return v

# ---------------------------------------------
# Colunas e pareamentos entre perfil e fazendas
# ---------------------------------------------
fatores = [
    ("Água",         "Água",          "Água"),
    ("pH",           "pH",            "pH ideal"),
    ("Textura",      "Textura",       "Textura preferida"),
    ("Temperatura",  "Temperatura",   "Temp. ideal"),
    ("Radiação",     "Radiação",      "Radiação"),
    ("Fertilidade",  "Fertilidade",   "Fertilidade"),
]

# ---------------------------------------------
# Pré-processo: índices de acesso rápidos
# ---------------------------------------------
# Produção base por grão
producao_base = producao_padrao_df.set_index("Grão")["Produção (t/ha)"]

# Pesos por grão (em %)
pesos_idx = pesos_importancia_df.set_index("Grão")

# Perfil desejado por grão
perfil_idx = perfil_grao_df.set_index("Grão")

# Condições por fazenda
cond_idx = condicoes_df.set_index("Fazenda")

# ---------------------------------------------
# Função de ajuste por fazenda
# ---------------------------------------------
def calcula_df_producao_fazenda_markdown(nome_fazenda: str) -> str:
    if nome_fazenda not in cond_idx.index:
        raise ValueError(f"Fazenda '{nome_fazenda}' não encontrada em condicoes_df.")
    cond_row = cond_idx.loc[nome_fazenda]

    linhas = []
    for grao in producao_base.index:
        base = float(producao_base.loc[grao])
        pesos = pesos_idx.loc[grao]

        ajuste_total_pct = 0.0
        for fator_nome, col_fazenda, col_perfil in fatores:
            valor_fazenda_norm = normaliza_categoria(fator_nome, cond_row[col_fazenda])
            valor_desejado_norm = normaliza_categoria(fator_nome, perfil_idx.loc[grao, col_perfil])
            peso_pct = float(pesos[fator_nome])
            if valor_fazenda_norm == valor_desejado_norm:
                ajuste_total_pct += peso_pct
            else:
                ajuste_total_pct -= peso_pct

        mult = 1.0 + (ajuste_total_pct / 100.0)
        mult = max(0.0, mult)
        prod_ajustada = base * mult

        linhas.append({
            "Grão": f"**{grao}**",
            "Produção base (t/ha)": round(base, 2),
            "Ajuste total (%)": f"{'+' if ajuste_total_pct > 0 else ''}{round(ajuste_total_pct, 1)}%",
            "Produção ajustada (t/ha)": round(prod_ajustada, 2),
        })

    df = pd.DataFrame(linhas).sort_values("Grão").reset_index(drop=True)

    # Retorna em formato Markdown
    return df.to_markdown(index=False, tablefmt="github")



for fazenda in condicoes_df["Fazenda"]:
    print(f"### {fazenda}")
    print(calcula_df_producao_fazenda_markdown(fazenda))
    print("\n")  # linha em branco para separar